name: "Publish Custom Collector Lambda layer"

on:
  workflow_dispatch:
    inputs:
      architecture:
        description: 'Architecture of the layer to be published'
        required: true
        type: choice
        options:
          - all
          - amd64
          - arm64
        default: all
      aws-region:
        description: 'AWS Region(s) where layer will be published'
        required: true
        type: choice
        options:
          - all
          - ca-central-1
          - ca-west-1
          - eu-central-1
          - eu-central-2
          - eu-north-1
          - eu-south-1
          - eu-south-2
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - us-east-1
          - us-east-2
          - us-west-2
        default: all
      distribution:
        description: 'Select a predefined set of components or choose custom'
        required: false
        type: choice
        default: 'default'
        options:
          - default
          - minimal
          - clickhouse
          - clickhouse-otlphttp
          - full
          - custom
      build-tags:
        description: 'Custom build tags (only used if distribution is set to custom)'
        required: false
        type: string
      upstream-repo:
        description: 'Upstream OpenTelemetry Lambda repository'
        required: false
        type: string
        default: 'open-telemetry/opentelemetry-lambda'
      upstream-ref:
        description: 'Upstream Git ref (branch, tag, commit SHA)'
        required: false
        type: string
        default: 'main'


# Add permissions required to match layer-publish.yml AND for release creation
permissions:
  id-token: write
  contents: write 

jobs:
  prepare-build-jobs:
    runs-on: ubuntu-latest
    outputs:
      build_jobs: ${{ steps.prepare-build-jobs.outputs.build_jobs }}
    steps:
      - id: prepare-build-jobs
        name: Prepare Build Jobs
        run: |
          architectures=''
          if [ "${{ github.event.inputs.architecture }}" == 'all' ]; then
            architectures='["amd64", "arm64"]'
          else
            architectures='["${{ github.event.inputs.architecture }}"]'
          fi
          echo "build_jobs={\"architecture\": ${architectures}}" | tr -d '[:space:]' >> $GITHUB_OUTPUT

  build-layer:
    needs: prepare-build-jobs
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare-build-jobs.outputs.build_jobs) }}
    steps:
      - name: Checkout This Repo
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '~1.21.9'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version

      - name: Build Layer using build_extension_layer.py
        run: |
          mkdir -p ./build
          # Python script is already executable, no chmod needed
          python3 ./scripts/build_extension_layer.py \
            --upstream-repo ${{ inputs.upstream-repo }} \
            --upstream-ref ${{ inputs.upstream-ref }} \
            --distribution ${{ inputs.distribution }} \
            --arch ${{ matrix.architecture }} \
            --build-tags "${{ inputs.build-tags }}" \
            --output-dir ./build

      - name: Upload Collector Artifact
        uses: actions/upload-artifact@v4
        with:
          name: custom-otel-collector-layer-${{ matrix.architecture }}.zip
          path: ./build/custom-otel-collector-layer-${{ matrix.architecture }}.zip

  prepare-release-jobs:
    needs: build-layer
    runs-on: ubuntu-latest
    outputs:
      release_jobs: ${{ steps.prepare-release-jobs.outputs.release_jobs }}
      collector_version: ${{ steps.collector-version.outputs.version }}
    steps:
      # Checkout upstream repo to get version information
      - name: Checkout Upstream Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.upstream-repo }}
          ref: ${{ inputs.upstream-ref }}
          path: upstream
          fetch-depth: 1

      - id: prepare-release-jobs
        name: Prepare Release Jobs
        run: |
          architectures=''
          if [ "${{ github.event.inputs.architecture }}" == 'all' ]; then
            architectures='["amd64", "arm64"]'
          else
            architectures='["${{ github.event.inputs.architecture }}"]'
          fi
          aws_regions=''
          if [ "${{ github.event.inputs.aws-region }}" == 'all' ]; then
            aws_regions='["ca-central-1", "ca-west-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "us-east-1", "us-east-2", "us-west-2"]'
          else
            aws_regions='["${{ github.event.inputs.aws-region }}"]'
          fi
          echo "release_jobs={\"architecture\": ${architectures}, \"aws_region\": ${aws_regions}}" | tr -d '[:space:]' >> $GITHUB_OUTPUT

      - name: Read collector version from Upstream
        id: collector-version
        working-directory: ./upstream
        run: |
          if [ -f "./collector/VERSION" ]; then
            COLLECTOR_VERSION=$(cat ./collector/VERSION)
            echo "Found upstream VERSION file: $COLLECTOR_VERSION"
          else
            echo "Upstream VERSION file not found, using fallback version"
            COLLECTOR_VERSION="v0.119.0" # Fallback
          fi
          echo "version=$COLLECTOR_VERSION" >> $GITHUB_OUTPUT
          echo "Collector version: $COLLECTOR_VERSION"

  release-layer:
    # This refers to the reusable workflow within THIS repository
    uses: ./.github/workflows/custom-layer-publish.yml
    needs: prepare-release-jobs
    strategy:
      matrix: ${{ fromJSON(needs.prepare-release-jobs.outputs.release_jobs) }}
    with:
      artifact-name: custom-otel-collector-layer-${{ matrix.architecture }}.zip
      layer-name: custom-otel-collector
      architecture: ${{ matrix.architecture }}
      runtimes: "nodejs18.x nodejs20.x nodejs22.x java17 java21 python3.9 python3.10 python3.11 python3.12 python3.13 dotnet6 dotnet8 provided.al2 provided.al2023"
      release-group: prod # Or make configurable
      aws_region: ${{ matrix.aws_region }}
      distribution: ${{ github.event.inputs.distribution }}
      collector-version: ${{ needs.prepare-release-jobs.outputs.collector_version }}
    secrets: inherit

  generate-layers-report:
    needs: release-layer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: 'scripts/generate-layers-report.py'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OTEL_LAMBDA_LAYER_PUBLISH_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1 # Use a default region for generating the report
          mask-aws-account-id: true

      - name: Generate Layers Report
        run: |
          # Generate a distribution-specific report
          python scripts/generate-layers-report.py \
            --pattern "*-${{ inputs.distribution }}*" \
            --output "LAYERS-${{ inputs.distribution }}.md"
          
          # Also generate a full report
          python scripts/generate-layers-report.py \
            --output "LAYERS-ALL.md"
      
      - name: Upload Layer Reports
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layers-report
          path: |
            LAYERS-*.md
          retention-days: 90

  # New Job for creating GitHub Release
  create-github-release:
    needs: [prepare-release-jobs, release-layer, generate-layers-report] # Run after publishing and report generation
    runs-on: ubuntu-latest
    steps:
      - name: Dump Needs Context
        run: |
          echo "Needs Context: ${{ toJSON(needs) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Match version used elsewhere
          cache: 'pip'
          cache-dependency-path: 'scripts/generate_release_notes.py' # Cache based on script

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install boto3

      - name: Configure AWS credentials (for release notes script)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OTEL_LAMBDA_LAYER_PUBLISH_ROLE_ARN }}
          role-duration-seconds: 1200
          aws-region: us-east-1 # Use a default region for querying DynamoDB
          mask-aws-account-id: true

      - name: Determine Release Info
        id: release_info
        env:
          # Map the needs output directly to an environment variable for this step
          INPUT_COLLECTOR_VERSION: ${{ needs.prepare-release-jobs.outputs.collector_version }}
        run: |
          DISTRIBUTION="${{ github.event.inputs.distribution }}"
          # Read collector version from the environment variable
          COLLECTOR_VERSION="$INPUT_COLLECTOR_VERSION"
          CUSTOM_BUILD_TAGS_INPUT="${{ github.event.inputs.build-tags }}"

          echo "Read Collector Version from env: $COLLECTOR_VERSION" # Add debug echo

          # --- Replicate get_build_tags logic from Python script --- 
          BUILD_TAGS=""
          case "$DISTRIBUTION" in
            minimal)
              BUILD_TAGS="lambdacomponents.custom,lambdacomponents.receiver.otlp,lambdacomponents.processor.batch"
              ;;
            clickhouse)
              BUILD_TAGS="lambdacomponents.custom,lambdacomponents.receiver.otlp,lambdacomponents.processor.batch,lambdacomponents.exporter.clickhouse"
              ;;
            clickhouse-otlphttp)
              BUILD_TAGS="lambdacomponents.custom,lambdacomponents.receiver.otlp,lambdacomponents.processor.batch,lambdacomponents.exporter.clickhouse,lambdacomponents.exporter.otlphttp"
              ;;
            full)
              BUILD_TAGS="lambdacomponents.custom,lambdacomponents.all"
              ;;
            custom)
              if [[ -n "$CUSTOM_BUILD_TAGS_INPUT" ]]; then
                  BUILD_TAGS="$CUSTOM_BUILD_TAGS_INPUT"
                  # Ensure lambdacomponents.custom is present
                  if [[ "$BUILD_TAGS" != *"lambdacomponents.custom"* ]]; then
                      BUILD_TAGS="lambdacomponents.custom,$BUILD_TAGS"
                  fi
              else
                  BUILD_TAGS="lambdacomponents.custom"
              fi
              ;;
            default | *)
              BUILD_TAGS="" # Default build with no special tags
              ;;
          esac
          # --- End of get_build_tags logic --- 

          # Clean collector version for tag/name (remove 'v' prefix)
          VERSION_TAG_PART=$(echo "$COLLECTOR_VERSION" | sed 's/^v//')
          TAG="${DISTRIBUTION}-v${VERSION_TAG_PART}"
          TITLE="Release ${DISTRIBUTION} v${VERSION_TAG_PART}"
          
          echo "Derived Build Tags: $BUILD_TAGS"
          echo "Release Tag: $TAG"
          echo "Release Title: $TITLE"
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "build_tags=$BUILD_TAGS" >> $GITHUB_OUTPUT
          echo "collector_version=$COLLECTOR_VERSION" >> $GITHUB_OUTPUT
          echo "distribution=$DISTRIBUTION" >> $GITHUB_OUTPUT

      - name: Generate Release Body
        id: generate_notes
        run: |
          python scripts/generate_release_notes.py \
            --distribution "${{ steps.release_info.outputs.distribution }}" \
            --collector-version "${{ steps.release_info.outputs.collector_version }}" \
            --build-tags "${{ steps.release_info.outputs.build_tags }}" \
            > release_notes.md
          echo "Generated release_notes.md"
          # Optional: Cat the file for debugging
          # cat release_notes.md

      - name: Download Layer Artifacts (amd64)
        uses: actions/download-artifact@v4
        with:
          name: custom-otel-collector-layer-amd64.zip
          path: ./release-assets/
        if: ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == 'amd64' }}

      - name: Download Layer Artifacts (arm64)
        uses: actions/download-artifact@v4
        with:
          name: custom-otel-collector-layer-arm64.zip
          path: ./release-assets/
        if: ${{ github.event.inputs.architecture == 'all' || github.event.inputs.architecture == 'arm64' }}

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Alternative if gh needs GH_TOKEN
        run: |
          echo "Creating release ${{ steps.release_info.outputs.tag }}"
          gh release create ${{ steps.release_info.outputs.tag }} \
            --title "${{ steps.release_info.outputs.title }}" \
            --notes-file release_notes.md \
            ./release-assets/*.zip # Upload all zip files in the assets dir
          echo "Release created successfully."
